* Why Learn to Program?
** Avenue for your other passions
Some people love programming for the sake of programming. They love solving problems. Some
programmers however, love programming because of what it can do for whatever their passion
might be. Whatever industry you want to disrupt, understanding how to program will give you
the extra edge. It doesn't matter if you want to become a yogi or an investment banker,
programming will help you get to the next level because not only does it help you utilize
computing power but also make you a better problem solver.
** Weird world of open source
Open source is a weird community. People are still not sure how this works. When you spend
hours writing beautiful code, it's logical to think that people would want to keep it for
themselves. But the culture in programming is not like that. We are constantly building on
top of other people's work so that we me go further together. So people write beautiful code
and make it available for free. People learn from it, modify it, and contribute to it. The 
belief is that code written together will always be better than code written by the few.
*** [[https://github.com/bitcoin/bitcoin][Bitcoin]] 
*** [[https://github.com/rails/rails][Rails]] 
*** [[https://github.com/atom/atom][Atom]] 
This is the text editor that we will be using. Let's go ahead and download this onto our
computer. The benefits of using Atom is that it can be used by a beginner right away but
it is also very extensible for seasoned developers. You might here some people saying
Sublime Text is better to start using which is also a great alternative. However Sublime
Text is not free and will continue to bug you to pay if you use the free version.
** Freedom and hope
Programming is fair. The more work you put in the better you are. Code speaks for itself and
having this tangible skill can give you the freedom to work efficiently as long as you have a
text editor and terminal in front of you. It also gives you hope. The chances aren't amazing
but it's cool to know that there is at least a 0.00000001% chance that a weekend project might
end up making a signficant impact on society.
* What is a website
** Lets start with a basic website
*** HTML is just text
A website looked so complicated to make. How on Earth does someone make a website? It felt
like magic. Too bad a website is just text. Everything is text, this is going be a common
theme. All text can be represented by numbers and numbers can be represented in bits. Whoa
we'll come back to this later, but the important part is a website is just text.
*** Example of .html file
#+BEGIN_SRC html
<h1>Hello</h1>
#+END_SRC
*** Deployment
**** Putting this file in an external computer
*** Request Response
**** What is a URL consist of?
***** Domain to figure out the IP Address, location of the computer
***** Instructions
* Tools
** Terminal
Terminal is a different way to interact with the computer. The OG way. In fact it was the only
way we could interact with a computer before. When there was no mouse and pretty graphic user
interfaces, the only way to communicate was with the terminal. As you develop more, you will
start to gravitate more and more towards interacting with your computer with the terminal
because it is more efficient, and you can do a lot more damage. With great power comes great
responsibility.

For those of you thinking, oh I'll learn this later let me try one more time to convince you. 
It's true we can nowadays do most of the development work without using the terminal. However,
as web developers, we can visit remote computers through our own terminal. Then, we have to user
the terminal commands so therefore learning the terminal is not a nice to have, but a required
skill of a web developer.

Now when we use the terminal to visit other computers, it's most likely computers that is
running some flavor of Linux an operating system like OS X and Windows but open source and what
is often used to deploy programs on the web. If you are a Mac user good news, the commands are
almost identical so practicing in the Terminal app will prepare you for the future. If you are
a Windows user I would install and use the Linux bash shell so that all of the commands you
practice will come in handy in the future when we user out terminal later in the book to use
to visit other computers.
*** ls
List (almost) everything in the current location.
*** ls -a
List everything in the current location
*** cd
**** .
Stands for the current directory
**** ..
Parent directory
**** cd directory_name
*** mkdir
Make directory
*** mv
**** Move
**** Rename
*** rm
**** Remove
*** rm -rf
**** Remove directories
** Text Editor
A text editor is a very sacred tool. You will spend most of your day on this because the job
of programmers is to edit text. People spend a little bit too much time configuring their text
editors and making it just right but it's justified. This is your home base. It's scary what
you can do with just a text editor and terminal.

It is highly recommended to know one editor really well. I've heard people say pick one editor
and learn it well. Text editors are awesome. I love text editors so the rest of this section
might be TMI. But really text editors are awesome.

[[http://www.manuelmagic.me/resources/Geek/Text-editors/text_editors.jpg][Learning Curves For Some Common Text Editors]]
*** Atom
Atom is an extensible, open source text editor that's full-featured from the start. It is
written in mostly Coffeescript which is language that gets translated into JavaScript. The
hipster way of writing JavaScript. This is why I would recommend this editor who is just
starting to learn programming because not only is it full-featured but it also gives
developers to use a really cool language to customize it. Oh, and it's open source so
there's a better chance it will stick around let's say 50 years from now.
*** vi
Even if you pick any other editor, you will end up having to use vi. When we visit remote
computers using our terminal, it will be the most convenient to just use vi to edit text
because most computers come baked with it. It's been around since the 70s which gives me
confidence that it will survive up until the day the world ends.

vi is a text editor that gives you absolute command of the text editor at your fingertips.
Now this is a great thing but it takes a really long time to get used to it. We will run
into vi when we deploy later, it can wait until then.
*** Sublime Text
Sublime Text used to be the hottest editor in town until Atom came out. Honestly it's
amazing software but it isn't free or open source. It's not made by a huge company either
so there is a chance that this editor might die let's say 50 years from now. It might still
be around but why pay for an editor when there are such amazing free open source text
editors out there?
*** Microsoft Word
Microsoft Word is a text editor. It's horrible for writing code because it will generate a
lot of random characters that only Microsoft Word will understand.
*** Notepad
Notepad is a text editor too! But why would you program with Notepad.
*** Emacs
Emacs is an operating system that has a great text editor. It's also from the 70s and going
to last until the world ends. There's constant debate between vi fan boys and Emacs lovers
but there is mutual respect between the two parties.
* Markup Language: Hierarchy
Now I know what a lot of people will do when we start learning about HTML. Oh I know that stuff!
If you don't great. Don't underestimate it. Technically it's not programming because it is a
markup language. However, I find it alarming how many people don't actually understand what HTML
is at its core because its often considered for beginners. I didn't understand it for a while
until I started using markup languages other than HTML.

Let's take a look at some markup languages. Notice the common trend. A markup language does not
define how something should look. A markup language defines the hierarchy of text or a hierarchy
of objects. Once again markup represents hierarchy and have nothing to do with how it should
look like.
** Examples
*** Markdown
*** Org-mode
*** HTML
*** XML
**** iOS
**** Android
* HTML
** Hierarchy
*** Markup hierarchy of a research paper
An HTML page is called a document because it was initially created to share documents with
one another. The documents shared were research papers that had clear hierarchy. There was
the header, a paragraph, some division of space and so on.
*** html
**** head
**** body
** Different way to think about it
*** World of objects
*** Objects inside of objects
** Think of Hierarchy
HTML is a markup language, which means it defines the hierarchy of our document. We can
construct our website with HTML elements that are given to us. Now it is important that we
use these elements properly and do not think of the aesthetics of our website but the
structure. For example in a navigation bar there is a list of links. It might be tempting to
think of them as pieces of text next to each other, we have to think of them as an unordered
list of elements which means we should use the <ul> and the <li> tags and then worry about
making them next to each other later after we are done marking up the document.
** div
*** Most generic markup
**** Division of space
*** Most generic object
**** Blank canvas
**** Go over default settings in different browsers
** h1..h6
*** Headers
**** Go over default settings in different browsers
*** Newspaper headings
** p
*** Paragraphs
**** Go over default settings in different browsers
** a
*** Links
*** Different pages
**** External link
**** Internal link
*** Images
**** S3
**** Imgur
** Inspect Element
*** Markup
**** HTML
*** CSS sneak peak
* HTML5
** video
*** S3
*** VODs
** audio
*** S3
*** Podcast
** Semantic tags
*** Common classes that everyone was using
**** nav
**** section
**** header
**** footer
**** aside
* CSS
** Block vs. Inline
*** Block
*** Inline
*** Key Differences
**** width/height
**** margin/padding
***** Picture example
** Inline Block
*** width/height
*** margin/padding
*** inline
*** vertical align top
* CSS3
** border-radius
*** Rounded edges
** vendor prefix
*** Experimental technology
* Responsive Design
** Different screen sizes
** Media query
** em
* Bootstrap
** Columns
** Navbar
* Communicating with a Computer
** Bits
*** Text
*** Images
*** Videos
*** 3D Videos
** Binary
*** Binary -> Number
** ASCII
*** Number -> Letter
* Intro to JavaScript
** Numbers
** Strings
** Variables
** Conditionals
** Loops
** Arrays
** Objects
* Sorts with JavaScript
** Bubble Sort
** Selection Sort
** Insertion Sort
* Advanced Sorts & Data Structures with JavaScript
** Recursion
** Merge Sort
** Quick Sort
** Array
** Linked List
* HTML/CSS/JS
Website is just HTML/CSS/JS no matter what it was written in.
** Example with all three
** Event listeners
** Callbacks
* JQuery
** Browser compatibility
** addClass
** removeClass
** html
* Intro to Ruby
** Objects
** Numbers
** Strings
** Variables
** Conditionals
** Loops
** Arrays
* Sinatra
** Routes
** GET
** POST
*** form
* Database Designs
** One to One
*** User has one classroom
*** User has one facebook
** One to Many
*** Repositories
*** Tweets
*** Posts
** Many to Many
*** Likes
*** Fans
*** Subscriptions
* MySQL
** INSERT
*** Create
*** create
** SELECT
*** Read
*** index & show
** UPDATE
*** Update
*** update
** DELETE
*** Delete
*** destroy
** LEFT JOIN
** JOIN
** SELF JOIN
* REST
** index
** new
** create
** edit
** update
** destroy
* Building APIs with Sinatra
** index
*** get '/users'
** new
*** get '/users/new'
** create
*** post '/users'
** edit
*** get '/users/1/edit'
** update
*** patch '/users/1'
** destroy
*** delete '/users/1'
* Ajax and APIs 
** $.get
*** get request to a URL and do something with the response
** $.post
*** post request to a URL and do something with the response
** $.ajax
*** generic way to send all ajax request to a URL and do something with the response
*** promise
* Rails I
** App structure
*** app
**** models
**** controllers
***** UsersController
**** views
***** users
****** index.html.erb
****** new.html.erb
****** show.html.erb
****** edit.html.erb
*** assets
**** stylesheets
***** users.scss
***** Sass
****** variables
****** nesting
**** javascripts
***** users.js
***** users.coffee
**** images
***** icons/svgs
***** s3
*** config/routes.rb
**** get '/users'
**** get '/users/new'
**** post '/users'
**** get '/users/1/edit'
**** patch '/users/1'
**** delete '/users/1'
** Routes
*** It all starts with the route
** Controllers
*** ApplicationController
*** action
** Views
*** same name as action
** Models
*** ActiveRecord::Base
*** Migrations
**** version control for the database
*** Validations
**** presence
**** regexp
**** numericality
** MVC
*** Error driven flow
*** Model
**** TicTacToeGame
*** View
*** Controller
*** Examples
**** Website
**** Game
**** iOS
**** Android
** REST
*** index
*** new
*** create
*** edit
*** update
*** destroy
* Rails II
** Authentication
*** Sign in
*** Sign up
** Channels
*** one to many
** Fans
*** many to many
* Rails III
** RSpec
*** Linked List in Ruby
** Rails Test Suite
*** rspec
*** capybara
*** database-cleaner
** Capybara
*** Feature tests
** Unit Tests
*** Model
*** Routes
*** Permissions
* Real-time Applications
** Node.js
*** Back-end JavaScript Environment
*** Node modules
*** Real-time
** Socket.io
*** Two libraries
**** Server side
**** Client side
*** Examples
**** Chat
**** iOS
**** Android
* Livestreaming with Wowza
** Transcoder
*** OBS
** Wowza Streaming Engine
** JWPlayer
** Deployment
*** EC2
* Payments with Stripe
** Checkout
** Connect
** Subscribers
* Deployment with Heroku
** Sinatra
** Rails
** Socket server
